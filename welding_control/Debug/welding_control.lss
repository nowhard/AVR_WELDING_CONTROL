
welding_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082d  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c6  00000000  00000000  00000bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fa  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000463  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c5  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  88:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pin_init>:

enStateMachine StateMachine;

void pin_init(void)
{
	WELD_WIRE_ENGINE_DDR |= (1<<WELD_WIRE_ENGINE_PIN);
  90:	55 9a       	sbi	0x0a, 5	; 10
	WELD_WIRE_ENGINE_PORT &= ~(1<<WELD_WIRE_ENGINE_PWM);
  92:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  96:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  9a:	2b b1       	in	r18, 0x0b	; 11
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <pin_init+0x16>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	4a 95       	dec	r20
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <pin_init+0x12>
  aa:	80 95       	com	r24
  ac:	90 95       	com	r25
  ae:	82 23       	and	r24, r18
  b0:	8b b9       	out	0x0b, r24	; 11

	ELECTRIC_VALVE_CONTROL_DDR |= (1<<ELECTRIC_VALVE_CONTROL_PIN);
  b2:	22 9a       	sbi	0x04, 2	; 4
	ELECTRIC_VALVE_CONTROL_PORT&=~(1<<ELECTRIC_VALVE_CONTROL_PIN);
  b4:	2a 98       	cbi	0x05, 2	; 5

	WELD_WIRE_KEY_DDR&=~(1<<WELD_WIRE_KEY_PIN);
  b6:	3b 98       	cbi	0x07, 3	; 7
	WELD_WIRE_KEY_PORT|=(1<<WELD_WIRE_KEY_PIN);
  b8:	43 9a       	sbi	0x08, 3	; 8

	WELD_TYPE_SWITCH_DDR&=(1<<WELD_TYPE_SWITCH_PIN);
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	84 70       	andi	r24, 0x04	; 4
  be:	87 b9       	out	0x07, r24	; 7
	WELD_TYPE_SWITCH_PORT|=(WELD_TYPE_SWITCH_PIN);
  c0:	41 9a       	sbi	0x08, 1	; 8
  c2:	08 95       	ret

000000c4 <timer0_init>:
}

void timer0_init(void)
{
	TCCR0A |= (1 << COM0A1)|((1 << COM0B1));
  c4:	84 b5       	in	r24, 0x24	; 36
  c6:	80 6a       	ori	r24, 0xA0	; 160
  c8:	84 bd       	out	0x24, r24	; 36
	// set none-inverting mode

	TCCR0A |= /*(1 << WGM01) |*/ (1 << WGM00);
  ca:	84 b5       	in	r24, 0x24	; 36
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	84 bd       	out	0x24, r24	; 36
	// set fast PWM Mode

	TCCR0B |= (1 << CS01)|(1 << CS00);
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bd       	out	0x25, r24	; 37


	TCNT0 = 0x00;
  d6:	16 bc       	out	0x26, r1	; 38
	//    ICR0 = 0xFF;
	OCR0A = 0x00;
  d8:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
  da:	18 bc       	out	0x28, r1	; 40
  dc:	08 95       	ret

000000de <adc_init>:



void adc_init(void)
{
	ADMUX|=(1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(0<<MUX0);//REF internal
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	86 64       	ori	r24, 0x46	; 70
  e6:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADIE)|(1<<ADSC);//enable, free running cycle, interrupt enable
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 6c       	ori	r24, 0xC8	; 200
  f0:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);//prescaler ADC=128
  f2:	80 81       	ld	r24, Z
  f4:	87 60       	ori	r24, 0x07	; 7
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <keys_read>:



void keys_read(void)
{
	if((WELD_TYPE_SWITCH_PINS&(1<<WELD_TYPE_SWITCH_PIN))==0)
  fa:	86 b1       	in	r24, 0x06	; 6
	else
	{

	}

	if((WELD_WIRE_KEY_PINS&(1<<WELD_WIRE_KEY_PIN))==0)
  fc:	86 b1       	in	r24, 0x06	; 6
  fe:	08 95       	ret

00000100 <StateMachineCycle>:
	}	
}

void StateMachineCycle(void)
{
	switch(StateMachine)
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <StateMachine>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	c9 f0       	breq	.+50     	; 0x13a <StateMachineCycle+0x3a>
 108:	28 f4       	brcc	.+10     	; 0x114 <StateMachineCycle+0x14>
 10a:	88 23       	and	r24, r24
 10c:	41 f0       	breq	.+16     	; 0x11e <StateMachineCycle+0x1e>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	69 f0       	breq	.+26     	; 0x12c <StateMachineCycle+0x2c>
 112:	08 95       	ret
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	09 f1       	breq	.+66     	; 0x15a <StateMachineCycle+0x5a>
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	79 f1       	breq	.+94     	; 0x17a <StateMachineCycle+0x7a>
 11c:	08 95       	ret
	{
		case STATE_STOP:
		{
			WELD_WIRE_ENGINE_PWM=0;	//stop wire
 11e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 122:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			PORTB&=~(1<<ELECTRIC_VALVE_CONTROL_PIN);//close valve
 126:	2a 98       	cbi	0x05, 2	; 5
			PORTB&=~(1<<WELD_CURRENT_ON_PIN);//current off
 128:	2b 98       	cbi	0x05, 3	; 5
		}
		break;
 12a:	08 95       	ret

		case STATE_SIMPLE_WELD:
		{
			WELD_WIRE_ENGINE_PWM=0;	//stop wire
 12c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 130:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			PORTB&=~(1<<ELECTRIC_VALVE_CONTROL_PIN);//close valve
 134:	2a 98       	cbi	0x05, 2	; 5
			PORTB|=(1<<WELD_CURRENT_ON_PIN);//current on
 136:	2b 9a       	sbi	0x05, 3	; 5
		}
		break;
 138:	08 95       	ret

		case STATE_PURGE_START:
		{
			WELD_WIRE_ENGINE_PWM=0;	//stop wire
 13a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 13e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			PORTB&=~(1<<WELD_CURRENT_ON_PIN);//current off
 142:	2b 98       	cbi	0x05, 3	; 5
			PORTB|=(1<<ELECTRIC_VALVE_CONTROL_PIN);//open valve
 144:	2a 9a       	sbi	0x05, 2	; 5
			StateMachine=STATE_PURGE_WAIT;
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <StateMachine>
			purge_timer=PURGE_TIME_MS;
 14c:	80 ed       	ldi	r24, 0xD0	; 208
 14e:	97 e0       	ldi	r25, 0x07	; 7
 150:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <purge_timer+0x1>
 154:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <purge_timer>
		}
		break;
 158:	08 95       	ret

		case STATE_PURGE_WAIT:
		{
			PORTB|=(1<<ELECTRIC_VALVE_CONTROL_PIN);//open valve
 15a:	2a 9a       	sbi	0x05, 2	; 5
			
			if((purge_timer-=10)==0)//wait a time
 15c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <purge_timer>
 160:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <purge_timer+0x1>
 164:	0a 97       	sbiw	r24, 0x0a	; 10
 166:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <purge_timer+0x1>
 16a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <purge_timer>
 16e:	89 2b       	or	r24, r25
 170:	91 f4       	brne	.+36     	; 0x196 <StateMachineCycle+0x96>
			{
				StateMachine=STATE_WIRE_WELD;
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <StateMachine>
 178:	08 95       	ret
		}
		break;

		case STATE_WIRE_WELD:
		{
			WELD_WIRE_ENGINE_PWM=(adc_result>>2);//run wire
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 18e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			PORTB|=(1<<ELECTRIC_VALVE_CONTROL_PIN);//open valve
 192:	2a 9a       	sbi	0x05, 2	; 5
			PORTB|=(1<<WELD_CURRENT_ON_PIN);//current on
 194:	2b 9a       	sbi	0x05, 3	; 5
 196:	08 95       	ret

00000198 <main>:
	}
}

int main(void)
{
	StateMachine=STATE_STOP;
 198:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <StateMachine>

	pin_init();
 19c:	0e 94 48 00 	call	0x90	; 0x90 <pin_init>
	timer0_init();
 1a0:	0e 94 62 00 	call	0xc4	; 0xc4 <timer0_init>
	adc_init();
 1a4:	0e 94 6f 00 	call	0xde	; 0xde <adc_init>

	WELD_WIRE_ENGINE_PWM=0;
 1a8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ac:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	sei();
 1b0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9c e9       	ldi	r25, 0x9C	; 156
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x1e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x24>
 1bc:	00 00       	nop
//	timer1_init();
	while(1)
	{
		_delay_ms(10);
		keys_read();
 1be:	0e 94 7d 00 	call	0xfa	; 0xfa <keys_read>
		StateMachineCycle();
 1c2:	0e 94 80 00 	call	0x100	; 0x100 <StateMachineCycle>
 1c6:	f5 cf       	rjmp	.-22     	; 0x1b2 <main+0x1a>

000001c8 <__vector_21>:
	}
}


ISR(ADC_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	if(!(ADMUX&(1<<ADLAR)))
 1de:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1e2:	85 fd       	sbrc	r24, 5
 1e4:	0f c0       	rjmp	.+30     	; 0x204 <__vector_21+0x3c>
	{
		adc_result=ADCL;
 1e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		adc_result|=ADCH<<8;
 1f4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1f8:	92 2b       	or	r25, r18
 1fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 202:	18 c0       	rjmp	.+48     	; 0x234 <__vector_21+0x6c>
	}
	else
	{
		adc_result=ADCL>>6;
 204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 208:	82 95       	swap	r24
 20a:	86 95       	lsr	r24
 20c:	86 95       	lsr	r24
 20e:	83 70       	andi	r24, 0x03	; 3
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		adc_result|=ADCH<<2;
 21a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	82 2b       	or	r24, r18
 22a:	93 2b       	or	r25, r19
 22c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 230:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	ADCSRA|=0x40;
 234:	ea e7       	ldi	r30, 0x7A	; 122
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 64       	ori	r24, 0x40	; 64
 23c:	80 83       	st	Z, r24
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
